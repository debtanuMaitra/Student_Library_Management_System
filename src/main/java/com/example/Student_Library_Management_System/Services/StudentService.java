package com.example.Student_Library_Management_System.Services;

import com.example.Student_Library_Management_System.DTOs.StudentUpdateMobRequestDto;
import com.example.Student_Library_Management_System.Enums.CardStatus;
import com.example.Student_Library_Management_System.Models.Card;
import com.example.Student_Library_Management_System.Models.Student;
import com.example.Student_Library_Management_System.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StudentService {

    @Autowired
    StudentRepository studentRepository;

    public String createStudent(Student student) {
        //Student from the postman is already the basic attribute set.


        //Card should be autogenerated when createStudent function is called.
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED); // Card status is being set
        card.setStudentVariableName(student); // Foreign key attribute
        //Filling the value of the unidirectional part.

        //Lets go to the student
        student.setCard(card);

        //If there was a unidirectional mapping: we had to save both of them
        //studentRepo.save() and cardRepo.save()

        //But we are using bi-directional mapping: Child will automatically be saved

        studentRepository.save(student);

        //By cascading effect, child will automatically be saved.(Card repo will be saved)

        return "Student and Card added";
    }

    public String findNameByEmail(String email) {
        Student student = studentRepository.findByEmail(email);
        return student.getName();
    }
    /*
    public String updateMobNo(Student newStudent) {

        //First we will try to fetch original data
        Student originalStudent = studentRepository.findById(newStudent.getId()).get();

        //We will keep the other parameters as it is and only change the required parameter
        originalStudent.setMobNo(newStudent.getMobNo());

        studentRepository.save(originalStudent);

        return "Student has been updated successfully!";
    }
    */
    public String updateMobNo(StudentUpdateMobRequestDto studentReq) {

        //Convert the DTO to entity: Saved better

        //First we will try to fetch original data
        Student originalStudent = studentRepository.findById(studentReq.getId()).get();

        //We will keep the other parameters as it is and only change the required parameter
        originalStudent.setMobNo(studentReq.getMobNo());

        //Always the entity object is being saved
        studentRepository.save(originalStudent);

        return "Student has been updated successfully!";
    }
}
